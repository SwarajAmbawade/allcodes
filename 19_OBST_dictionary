#include <iostream>
#include <string>
using namespace std;

struct Node {
    string keyword;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        left = right = NULL;
        height = 1;
    }
};
int height(Node* n) {
    return n ? n->height : 0;
}

int getBalance(Node* n) {
    return n ? height(n->left) - height(n->right) : 0;
}

void updateHeight(Node* n) {
    n->height = 1 + max(height(n->left), height(n->right));
}

Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    updateHeight(y);
    updateHeight(x);
    return x;
}

Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    updateHeight(x);
    updateHeight(y);
    return y;
}

Node* insert(Node* root, string key, string meaning) {
    if (!root)
        return new Node(key, meaning);

    if (key < root->keyword)
        root->left = insert(root->left, key, meaning);
    else if (key > root->keyword)
        root->right = insert(root->right, key, meaning);
    else {
        cout << "Keyword already exists.\n";
        return root;
    }

    updateHeight(root);
    int balance = getBalance(root);

    if (balance > 1 && key < root->left->keyword)

        return rotateRight(root);
    if (balance < -1 && key > root->right->keyword)
        return rotateLeft(root);
    if (balance > 1 && key > root->left->keyword) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && key < root->right->keyword) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left)
        current = current->left;
    return current;
}

Node* deleteNode(Node* root, string key) {
    if (!root)
        return root;

    if (key < root->keyword)
        root->left = deleteNode(root->left, key);
    else if (key > root->keyword)
        root->right = deleteNode(root->right, key);
    else {
        if (!root->left || !root->right) {
            Node* temp = root->left ? root->left : root->right;
            if (!temp) return NULL;
            *root = *temp;
            delete temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->keyword = temp->keyword;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->keyword);
        }
    }

    updateHeight(root);
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rotateRight(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return rotateLeft(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

bool updateMeaning(Node* root, string key, string newMeaning) {
    if (!root) return false;
    if (key == root->keyword) {
        root->meaning = newMeaning;
        return true;
    }
    return key < root->keyword ? updateMeaning(root->left, key, newMeaning) :
                                  updateMeaning(root->right, key, newMeaning);
}

void inOrder(Node* root) {
    if (!root) return;
    inOrder(root->left);
    cout << root->keyword << " : " << root->meaning << endl;
    inOrder(root->right);
}

void reverseInOrder(Node* root) {
    if (!root) return;
    reverseInOrder(root->right);
    cout << root->keyword << " : " << root->meaning << endl;
    reverseInOrder(root->left);
}

bool search(Node* root, string key, int& comparisons) {
    if (!root) return false;
    comparisons++;
    if (key == root->keyword) return true;
    return key < root->keyword ? search(root->left, key, comparisons) :
                                 search(root->right, key, comparisons);
}

int maxComparisons(Node* root) {
    return height(root);
}

int main() {
    Node* root = NULL;
    int choice;
    string keyword, meaning;

    while (true) {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add Keyword\n";
        cout << "2. Delete Keyword\n";
        cout << "3. Update Meaning\n";
        cout << "4. Display Ascending\n";
        cout << "5. Display Descending\n";
        cout << "6. Search Keyword\n";
        cout << "7. Max Comparisons (Tree Height)\n";
        cout << "8. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> keyword;
                cout << "Enter meaning: ";
                cin.ignore();
                getline(cin, meaning);
                root = insert(root, keyword, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> keyword;
                root = deleteNode(root, keyword);
                break;
            case 3:
                cout << "Enter keyword to update: ";
                cin >> keyword;
                cout << "Enter new meaning: ";
                cin.ignore();
                getline(cin, meaning);
                if (updateMeaning(root, keyword, meaning))
                    cout << "Meaning updated.\n";
                else
                    cout << "Keyword not found.\n";
                break;
            case 4:
                cout << "\n--- Ascending Order ---\n";
                inOrder(root);
                break;
            case 5:
                cout << "\n--- Descending Order ---\n";
                reverseInOrder(root);
                break;
            case 6:{
                cout << "Enter keyword to search: ";
                cin >> keyword;
                int comparisons = 0;
                if (search(root, keyword, comparisons)) {
                    cout << "Keyword found in " << comparisons << " comparisons.\n";
                } else {
                    cout << "Keyword not found. Comparisons made: " << comparisons << endl;
                }
                break;
        }
            case 7:
                cout << "Maximum comparisons required to find a keyword: " << maxComparisons(root) << endl;
                break;
            case 8:
                return 0;
            default:
                cout << "Invalid choice.\n";
        }
    }
}
