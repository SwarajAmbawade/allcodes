#include <iostream>
#include <queue>
using namespace std;

#define MAX 10  // Maximum number of nodes

class Graph {
    int V;
    int adjMatrix[MAX][MAX]; // Adjacency Matrix
    int adjList[MAX][MAX];   // Adjacency List
    int listSize[MAX];       // Size of adjacency list for each node
    string names[MAX];       // Landmark names

public:
    Graph(int vertices) {
        V = vertices;
        for (int i = 0; i < V; i++) {
            listSize[i] = 0;
            for (int j = 0; j < V; j++) {
                adjMatrix[i][j] = 0;
                adjList[i][j] = -1;
            }
        }

        // Set default landmark names (you can change these as needed)
        names[0] = "Main Gate";
        names[1] = "Library";
        names[2] = "Canteen";
        names[3] = "Classrooms";
        names[4] = "Auditorium";
    }

    void addEdge(int u, int v) {
        adjMatrix[u][v] = adjMatrix[v][u] = 1;
        adjList[u][listSize[u]++] = v;
        adjList[v][listSize[v]++] = u;
    }

    void DFS(int start, int visited[]) {
        cout << names[start] << " - ";
        visited[start] = 1;

        for (int i = 0; i < V; i++) {
            if (adjMatrix[start][i] == 1 && visited[i] == 0) {
                DFS(i, visited);
            }
        }
    }

    void BFS(int start) {
        queue<int> q;
        int visited[MAX] = {0};

        q.push(start);
        visited[start] = 1;

        while (!q.empty()) {
            int node = q.front(); q.pop();
            cout << names[node] << " - ";

            for (int i = 0; i < listSize[node]; i++) {
                int neighbor = adjList[node][i];
                if (visited[neighbor] == 0) {
                    visited[neighbor] = 1;
                    q.push(neighbor);
                }
            }
        }
    }

    void displayGraph() {
        cout << "\nAdjacency Matrix:\n";
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int V = 5;  // Number of landmarks
    Graph g(V);

    // Add connections between landmarks
    g.addEdge(0, 1);  // Main Gate - Library
    g.addEdge(0, 2);  // Main Gate - Canteen
    g.addEdge(1, 3);  // Library - Classrooms
    g.addEdge(2, 3);  // Canteen - Classrooms
    g.addEdge(3, 4);  // Classrooms - Auditorium

    g.displayGraph();

    int visited[MAX] = {0};
    cout << "\nDFS Traversal: ";
    g.DFS(0, visited);  // Start from Main Gate

    cout << "\nBFS Traversal: ";
    g.BFS(0);           // Start from Main Gate

    return 0;
}
