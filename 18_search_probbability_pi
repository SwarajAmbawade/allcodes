#include <iostream>
using namespace std;

#define MAX 100
#define INF 1e9  // A large number to simulate infinity

// Function to compute prefix sums of probabilities
void computePrefixSum(float p[], float sum[], int n) {
    sum[0] = 0;
    for (int i = 1; i <= n; i++) {
        sum[i] = sum[i - 1] + p[i - 1];
    }
}

// Function to construct the Optimal BST
float optimalBST(float p[], int n) {
    float cost[MAX][MAX];  // Cost table
    int root[MAX][MAX];    // Root table
    float sum[MAX];        // Prefix sum

    computePrefixSum(p, sum, n);

    // Initialize base cases
    for (int i = 1; i <= n; i++) {
        cost[i][i] = p[i - 1];
        root[i][i] = i;
    }

    // Fill tables for chains of length 2 to n
    for (int L = 2; L <= n; L++) {
        for (int i = 1; i <= n - L + 1; i++) {
            int j = i + L - 1;
            cost[i][j] = INF;

            for (int r = i; r <= j; r++) {
                float left = (r > i) ? cost[i][r - 1] : 0;
                float right = (r < j) ? cost[r + 1][j] : 0;
                float total = sum[j] - sum[i - 1];

                float c = left + right + total;

                if (c < cost[i][j]) {
                    cost[i][j] = c;
                    root[i][j] = r;
                }
            }
        }
    }

    // Print the result
    cout << "Minimum cost of Optimal BST: " << cost[1][n] << endl;
    return cost[1][n];
}

int main() {
    int n;
    float p[MAX];

    cout << "Enter number of keys: ";
    cin >> n;

    cout << "Enter access probabilities for " << n << " sorted keys:\n";
    for (int i = 0; i < n; i++) {
        cin >> p[i];
    }

    optimalBST(p, n);

    return 0;
}
